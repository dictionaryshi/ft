分布式系统:把原来用Java开发的一个大系统, 给拆分成多个子系统, 多个子系统之间互相调用, 形成一个大系统的整体。

一个服务的代码不要太多, 服务的拆分先按大的业务进行第一轮拆分, 然后再拆分每一个子业务。

系统拆分如果不用dubbo等RPC框架, 那么可以采用简单的http通信。但是需要自己处理超时重试、负载均衡等问题。

架构演变:
    *单一应用架构:网站流量很小时, 只需一个应用, 将所有功能都部署在一起。
    *垂直应用架构:当访问量逐渐增大, 单一应用增加机器带来的加速度越来越小, 将应用拆成互不相干的几个应用, 以提升效率。(拆分为PC端、APP端、后端)
    *分布式服务架构:当垂直应用越来越多, 应用之间交互不可避免, 将核心业务抽取出来, 作为独立的服务, 逐渐形成稳定的服务中心, 使前端应用能更快速的响应多变的市场需求。
    *流动计算架构:当服务越来越多, 容量的评估, 小服务资源的浪费等问题逐渐显现, 此时需增加一个调度中心基于访问压力实时管理集群容量, 提高集群利用率。

dubbo工作流程:
    0)服务容器负责启动, 加载, 运行服务提供者。
    1)服务提供者在启动时, 向注册中心注册自己提供的服务。
    2)服务消费者在启动时, 向注册中心订阅自己所需的服务。
    3)注册中心返回服务提供者地址列表给消费者, 如果有变更, 注册中心将基于长连接推送变更数据给消费者。
    4)服务消费者, 从提供者地址列表中, 基于软负载均衡算法, 选一台提供者进行调用, 如果调用失败, 再选另一台调用。
    5)服务消费者和提供者, 在内存中累计调用次数和调用时间, 定时每分钟发送一次统计数据到监控中心。

dubbo注册中心挂了还可以继续通信, 因为开始初始化的时候, 消费者会将提供者的地址等信息拉取到本地缓存。

服务提供者和消费者只在启动时与注册中心交互, 注册中心不转发请求, 压力较小。
注册中心, 服务提供者, 服务消费者三者之间均为长连接。
注册中心通过长连接感知服务提供者的存在, 服务提供者宕机, 注册中心将立即推送事件通知消费者。

dubbo通信协议:
    1)dubbo协议:默认协议。单一长连接, 进行的是NIO异步通信, 基于hessian作为序列化协议。使用的场景是:传输数据量小(每次请求在100kb以内), 但是并发量很高。

为了要支持高并发场景, 一般是服务提供者就几台机器, 但是服务消费者有上百台, 可能每天调用量达到上亿次, 此时用长连接是最合适的, 就是跟每个服务消费者维持一个长连接就可以。
可能总共就100个连接。然后后面直接基于长连接NIO异步通信, 可以支撑高并发请求。

dubbo负载均衡策略:
    1)random loadbalance:默认策略。可以对provider不同实例设置不同的权重, 会按照权重来负载均衡, 权重越大分配流量越高, 一般就用这个默认的就可以了。
    2)roundrobin loadbalance:均匀地将流量打到各个机器上去, 但是如果各个机器的性能不一样, 容易导致性能差的机器负载过高。
    所以此时需要调整权重, 让性能差的机器承载权重小一些, 流量少一些。(解决机器配置低)
    3)leastactive loadbalance:最小活跃数负载均衡。
    4)consistanthash loadbalance:相同参数的请求一定分发到一个provider上去, provider挂掉的时候, 会基于虚拟节点均匀分配剩余的流量, 抖动不会太大。

SPI:service provider interface。
Protocol接口, 在系统运行的时候, dubbo会判断一下应该选哪个实现类来实例化。它会去找一个你配置的Protocol实现类, 如果找到, 那么直接使用它。
对很多组件, 都是保留一个接口和多个实现, 然后在系统运行的时候动态根据配置去找到对应的实现类。如果你没配置, 那就走默认的实现好了。

timeout:一般设置为200ms。
retries:一般是在读请求的时候。

幂等:
    1)对于每个请求必须有一个唯一的标识。
    2)每次处理完请求之后, 必须有一个记录标识这个请求处理过了。常见的方案是在mysql中记录个状态。
    3)每次接收请求需要进行判断之前是否处理过。

保证顺序性:使用dubbo的一致性hash负载均衡策略, 然后使用内存队列。

dubbo大数据传输效率低:因dubbo协议采用单一长连接, 如果每次请求的数据包大小为500KByte, 假设网络为千兆网卡(QPS:1024Mbit=128MByte),
每条连接最大7MByte/QPS(不同的环境可能不一样), 单个服务提供者的TPS(每秒处理事务数)最大为:128MByte / 500KByte = 262。
单个消费者调用单个服务提供者的TPS(每秒处理事务数)最大为:7MByte / 500KByte = 14。如果能接受, 可以考虑使用, 否则网络将成为瓶颈。

