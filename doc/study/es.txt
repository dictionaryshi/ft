lucene是最先进、功能最强大的搜索库。如果直接基于lucene开发, 非常复杂。
lucene就是一个jar包, 里面包含了封装好的各种建立倒排索引的算法代码。通过lucene, 我们可以将已有的数据建立索引, lucene会在本地磁盘上面, 给我们组织索引的数据结构。

elasticsearch基于lucene, 隐藏了lucene的复杂性, 提供了简单易用的restful api。
分布式、支持PB级数据的文档存储引擎、搜索引擎和分析引擎。

es的核心概念:
    *Near Realtime:从写入数据到数据可以被搜索到有一秒的延迟。

    *shard:单台机器无法存储大量数据, es可以将一个索引中的数据切分为多个shard, 分布在多台服务器上存储。
    有了shard就可以横向扩展, 存储更多数据, 让搜索和分析等操作分布到多台服务器上去执行, 提升吞吐量和性能。
    每个shard都是一个lucene index。

    *replica:任何一个服务器随时可能故障或宕机, 此时shard可能就会丢失, 因此可以为每个shard创建多个replica副本。
    replica可以在shard故障时提供备用服务, 保证数据不丢失, 多个replica还可以提升搜索操作的吞吐量和性能。
    primary shard(建立索引时设置, 不能修改, 默认5个), replica shard(可随时修改数量, 默认1 个),
    默认每个索引10个shard, 5个primary shard, 5个replica shard, 最小的高可用配置, 是2 台服务器。

es集群多个节点, 会自动选举一个节点为master节点, 这个master节点其实就是干一些管理的工作的,
比如维护索引元数据、负责切换primary shard和replica shard身份等。要是master节点宕机了,
那么会重新选举一个节点为master节点。

如果是非master节点宕机了, 那么master节点会让那个宕机节点上的primary shard的身份转移到其他机器上的replica shard上去。
接着你要是修复了那个宕机机器(重启了之后), master节点会控制将缺失的replica shard分配过去, 同步后续修改的数据,
让集群恢复正常。

es          db
index       数据库
type        数据表
document    一行数据

es写数据过程:
    1)客户端选择一个node发送请求过去, 这个node就是coordinating node(协调节点)。
    2)coordinating node对document进行路由, 将请求转发给对应的node(有primary shard的node)。
    3)primary shard node处理请求, 然后将数据同步到replica node。
    4)coordinating node如果发现primary node和所有replica node都搞定之后, 就返回响应结果给客户端。

es读数据过程(通过doc id来查询, 会根据doc id进行hash, 判断出来当时把doc id分配到了哪个shard上面去, 从那个shard去查询):
    1)客户端发送请求到任意一个node(coordinate node)。
    2)coordinate node对doc id进行哈希路由, 在primary shard以及其所有replica中随机选择一个。(负载均衡)
    3)接收请求的node返回document给coordinate node。
    4)coordinate node返回document给客户端。

es SearchType:
    1)query and fetch:向索引的所有shard都发出查询请求, 各分片返回的时候把document和计算后的排名信息(_score)一起返回。(性能最快, 排名不准, 查询量为用户查询量N * shard数)
    2)query then fetch:向所有shard发出请求, 各分片只返回文档id和_score, 然后按照各分片返回的文档的_score进行重新排序和排名, 取前N个文档。(性能一般, 排名不准, 查询量与用户要求一致)
    3)DFS query and fetch:在进行查询之前, 先对所有分片发送请求, 把所有分片中的词频和文档频率等打分依据全部汇总到一块。(性能一般, 排名准确, 查询量为用户查询量N * shard数)
    4)DFS query then fetch:比2)多一个DFS过程。(性能最差, 排名准确, 查询数据量准确)

es 搜索数据过程:
    1)客户端发送请求到一个coordinate node。
    2)协调节点将搜索请求转发到所有的shard上。(primary shard或replica shard)
    3)query phase:每个shard将自己的搜索结果(doc id)和_score返回给协调节点, 由协调节点进行数据的合并、排序、分页等操作, 产生最终结果。
    4)fetch phase:接着由协调节点根据doc id去各个节点上拉取实际的document数据, 最终返回给客户端。

es 写数据底层原理:
    1)先写入内存buffer, 同时将数据写入translog日志文件。在buffer里的时候数据是搜索不到的。
    如果buffer快满了, 或者到一定时间, 就会将内存buffer中的数据refresh到一个新的segment file中。(先进入os cache)
    每隔1秒钟, es将buffer中的数据写入一个新的segment file中, 每秒钟会产生一个新的磁盘文件segment file, 存储最近1秒内buffer中写入的数据。

    2)只要buffer中的数据被refresh操作刷入os cache中, 这个数据就可以被搜索到了。

    3)es是准实时的:默认是每隔1秒refresh一次的, 所以es是准实时的, 因为写入的数据1秒之后才能被看到。
    可以通过es的restful api或者java api, 手动执行一次refresh操作, 就是手动将buffer中的数据刷入os cache中,
    让数据立马就可以被搜索到。只要数据被输入os cache中, buffer就会被清空了, 因为不需要保留buffer了, 数据在translog里面已经持久化到磁盘去一份了。

    4)重复上面的步骤, 新的数据不断进入buffer和translog, 不断将buffer数据写入一个又一个新的segment file中去,
    每次refresh完buffer清空, translog保留。随着这个过程推进, translog会变得越来越大。当translog达到一定长度的时候, 就会触发commit操作。

    5)commit操作发生第一步, 就是将buffer中现有数据refresh到os cache中去, 清空buffer。
    然后, 将一个commit point写入磁盘文件, 里面标识着这个commit point对应的所有segment file,
    同时强行将os cache中目前所有的数据都fsync到磁盘文件中去。最后清空现有translog日志文件, 重启一个translog, 此时commit操作完成。

    6)这个commit操作叫做flush。默认30分钟自动执行一次flush, 但如果translog过大, 也会触发flush。
    flush操作就对应着commit的全过程, 我们可以通过es api, 手动执行flush操作, 手动将os cache中的数据fsync强刷到磁盘上去。

    7)translog日志文件的作用:执行commit操作之前, 数据要么是停留在buffer中, 要么是停留在os cache中, 一旦这台机器死了, 内存中的数据就全丢了。
    所以需要将数据对应的操作写入一个专门的日志文件translog中, 一旦此时机器宕机, 再次重启的时候, es会自动读取translog日志文件中的数据, 恢复到内存buffer和os cache中去。

    8)translog也是先写入os cache, 默认每隔5秒刷一次到磁盘中去, 所以有5秒的数据, 停留在buffer、translog os cache、segment file os cache中, 所以会有5秒数据丢失的风险。
    也可以将translog设置成每次写操作必须是直接fsync到磁盘, 但是性能会差很多。

    9)数据写入segment file之后, 同时就建立好了倒排索引。

删除/更新数据底层原理:
    1)如果是删除操作, commit的时候会生成一个.del文件, 里面将某个doc标识为deleted状态, 那么搜索的时候根据.del文件就知道这个doc是否被删除了。

    2)如果是更新操作, 就是将原来的doc标识为deleted状态, 然后新写入一条数据。

    3)buffer每refresh一次, 就会产生一个segment file, 所以默认情况下是1秒钟一个segment file, 这样下来segment file会越来越多, 此时会定期执行merge。
    每次merge的时候, 会将多个segment file合并成一个, 同时这里会将标识为deleted的doc给物理删除掉,
    这里会写一个commit point, 标识所有新的segment file, 同时删除旧的segment file。

倒排索引:在搜索引擎中, 每个文档都有一个对应的文档ID, 文档内容被表示为一系列关键词的集合。倒排索引就是关键词到文档ID的映射。倒排索引中的所有词项对应一个或多个文档。
倒排索引中的词项根据字典顺序升序排列。

倒排索引还会记录词频和逆文档频率:
    词频(TF):搜索词条在当前field文本中出现了多少次, 出现次数越多, 就越相关。
    逆文档频率(IDF):搜索词条在整个索引的所有文档中出现了多少次, 出现的次数越多, 就越不相关。

es的搜索引擎严重依赖于底层的filesystem cache, 如果给filesystem cache更多的内存,
尽量让内存可以容纳所有的idx segment file(索引数据文件), 那么你搜索的时候就基本都是走内存的, 性能会非常高。(毫秒级)

要让es性能好, 最佳情况就是, 机器的内存至少可以容纳总数据量的一半。(只存储索引字段, 其它字段存储在hbase中)
保证热数据都可以在filesystem cache中。

数据预热:对于那些你觉得比较热的、经常会有人访问的数据, 最好做一个专门的缓存预热系统, 就是对热数据每隔一段时间, 就提前访问一下,
让数据进入filesystem cache里面去。这样下次别人访问的时候, 性能一定会好很多。

分布式分页:每页10条数据, 查询第100页, 把每个shard上存储的前1000条数据都查到一个协调节点上, 由协调节点处理后输出10条数据。

es使用scroll api优化分页查询。

