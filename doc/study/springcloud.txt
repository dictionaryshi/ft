Eureka Client:负责将服务的信息注册到Eureka Server中。将Eureka Server中的其他服务注册信息拉到本地缓存中。

Ribbon从Eureka Client获取对应的服务注册表, 然后Ribbon就可以使用默认的Round Robin算法, 从中选择一台机器。
Feign就会针对这台机器, 构造并发起请求。

Eureka Client默认每隔30秒会发送一个请求到Eureka Server, 来拉取最近有变化的服务信息。
同时Eureka Client每隔30秒还会发送一次心跳到Eureka Server, 证明自己活着。

Eureka Server的注册表直接基于纯内存。(ConcurrentHashMap)

为了确保Ribbon重试的时候不被熔断, 我们就需要让Hystrix的超时时间大于Ribbon的总超时时间。
Ribbon超时时间:(1 + MaxAutoRetries + MaxAutoRetriesNextServer) * ReadTimeout

hystrix线程池大小:
    30(每秒请求数量) * 0.2(每个请求的处理秒数) + 4(加点缓冲buffer) = 10(线程数量)
    一个线程1秒可以执行5个请求, 只要6个线程, 每秒就可以执行30个请求。
    在系统高峰期, 系统性能略有下降, 此时不少请求耗费了300多毫秒才执行完, 那么一个线程每秒只能处理3个请求了,
    10个线程刚刚好勉强可以hold住每秒30个请求。所以你必须多考虑留几个buffer线程。
    超时时间最大设置为300ms, 否则系统故障时, 将直接丢弃新请求。(如果你的超时时间设置成了500毫秒, 10个线程每秒只能处理20个请求)

