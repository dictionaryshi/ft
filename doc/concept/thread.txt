synchronized底层原理:
    1)每个对象都会与一个monitor相关联, 当某个monitor被拥有之后就会被锁住, 当线程执行到monitorenter指令时, 就会去尝试获得对应的monitor。
    2)每个monitor维护着一个记录着拥有次数的计数器。未被拥有的monitor的该计数器为0, 当一个线程获得monitor(执行monitorenter)后, 该计数器自增变为1。
    当同一个线程再次获得该monitor的时候, 计数器再次自增。当不同线程想要获得该monitor的时候, 就会被阻塞。
    3)当同一个线程释放monitor(执行monitorexit指令), 计数器再自减。当计数器为0的时候。monitor将被释放, 其他线程便可以获得monitor。

同步代码块的入口和出口分别有monitorenter, monitorexit指令。
同步方法:JVM用ACC_SYNCHRONIZED关键字标识同步方法。

synchronized和Lock的区别:
    1)synchronized是关键字属于JVM层面, 底层通过监视器来实现。Lock是通过巧妙的数据结构实现。
    2)Lock要求用户必须手动释放锁。
    3)Lock可以等待中断。public void lockInterruptibly(); public boolean tryLock(long timeout, TimeUnit unit);
    4)Lock可以是公平锁。
    5)Lock可以绑定多个Condition, 可以实现分组唤醒。synchronized只能随机唤醒一个线程或唤醒全部。
    6)Lock支持读写锁。

线程池配置:
    1.CPU密集:CPU核数 + 1
    2.IO密集:
        1)通用:CPU核数 * 2
        2)精确:CPU核数 / (1 - 阻塞系数)。阻塞系数:IO密集通常在0.8 ~ 0.9。

线程池使用无界阻塞队列可能会导致系统OOM。

线程池可以自定义拒绝策略, 将超出的任务进行报警或存储。

