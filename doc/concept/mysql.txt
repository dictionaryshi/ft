关系型数据库:使用二维表格来存储数据。

13.sql语句的分类:
    1)DDL:数据定义语言(CREATE, DROP, ALTER)。
    2)DML:数据操作语言(INSERT, UPDATE, DELETE)。
    3)DCL:数据控制语言(GRANT, REVOKE)。
    4)DQL:数据查询语言(SELECT)。

14.DQL的语法:

    SELECT DISTINCT <selection_list>

    FROM   <left_table>

    <join_type> JOIN <right_table> ON <join_condition>

    WHERE <where_condition>

    GROUP BY <table_column>

    HAVING <having_condition>

    ORDER BY <table_column> ASC/DESC

    LIMIT start_row,count_rows;

机器读取顺序:

    FROM:对左表和右表计算笛卡尔积。产生虚拟表VT1。

    ON:对虚拟表VT1进行ON筛选, 符合<join-condition>的行会被记录在虚拟表VT2中。

    JOIN_TYPE:主表中不符合<join-condition>的数据也会加入到VT2中, 作为外部行, 生成虚拟表VT3。

    WHERE:对虚拟表VT3进行WHERE条件过滤。只有符合<where-condition>的记录才会被插入到虚拟表VT4中。

    GROUP BY:对VT4中的记录进行分组操作, 生成VT5。

    HAVING:对虚拟表VT5使用having过滤, 只有符合<having-condition>的记录才会被插入到虚拟表VT6中。

    SELECT:执行select操作, 选择指定的列, 插入到虚拟表VT7中。

    DISTINCT:对VT7中的记录进行去重。产生虚拟表VT8。

    ORDER BY:将虚拟表VT8中的记录按照<order_by_list>进行排序操作, 产生虚拟表VT9。

    LIMIT:取出指定行的记录, 产生虚拟表VT10, 并将结果返回。

15.模糊查询:
    SELECT t.REAL_NAME FROM tgs_sys_user t WHERE t.REAL_NAME LIKE CONCAT ('%','波','%');
    SELECT t.REAL_NAME FROM tgs_sys_user t WHERE t.REAL_NAME LIKE '_春%';

16.如果每页查n条, 要查第m页。
    SELECT * FROM tgs_sys_user LIMIT (m - 1) * n, n;

17.合并结果集:
    SELECT * FROM emp UNION ALL SELECT * FROM emp; // 保留重复结果集
    SELECT * FROM emp UNION SELECT * FROM emp;     // 去除重复结果集

18.子查询:
    SELECT
        *
    FROM emp t1
    WHERE t1.sal > ALL (SELECT t2.sal FROM emp t2 WHERE t2.deptno = 30);

19.decimal(5,2)表示长度是5其中两位是小数, 如:999.99。

20.查看mysql进程:SHOW PROCESSLIST;

21.查看所有的表:SHOW TABLES;

22.查看指定表的创建语句:SHOW CREATE TABLE tgs_order_main;

23.查看表结构(字段和类型):DESC tgs_order_main;

25.TRUNCATE是DDL语句, 原理是先将表drop掉然后重新再创建表,
相比delete而言truncate的效率更高, 但是truncate删除的数据是无法回滚的。

26.查看MySQL数据库的所有管理员信息。
    USE mysql;
    SELECT * FROM `user`;

27.创建mysql用户
    CREATE USER sd@localhost IDENTIFIED BY '123456';
    CREATE USER sd@'%' IDENTIFIED BY '123456';

28.删除mysql用户
    DROP USER sd@localhost;
    DROP USER sd@'%';

29.查看用户的权限:
    SHOW GRANTS FOR sd@'%';

30.给用户授权:
    GRANT CREATE,ALTER,DROP,INSERT,UPDATE,DELETE,SELECT ON car.* TO sd@'%';

31.给用户分配某个数据库的所有权限。
    GRANT ALL ON car.* TO sd@'%';

32.撤销用户权限:
    REVOKE ALL ON car.* FROM sd@'%';
    REVOKE  INSERT, UPDATE, DELETE, CREATE, DROP, ALTER ON car.* FROM sd@'%';

33.修改用户密码:
    USE mysql;
    UPDATE `user` t SET
        PASSWORD = PASSWORD('789')
    WHERE
        t.User = 'sd' AND t.Host = '%';

    FLUSH PRIVILEGES;

34.MySql的备份与恢复。
    mysqldump -uroot -p car > /opt/car.sql
    mysql -uroot -p car < /opt/car.sql (无需登录就恢复数据库中的数据的方式)

35.事务就是对数据库的一组操作, 但是这些操作必须要么全部成功, 要么全部失败。例如:银行转账。

36.事务的四大特性(ACID):
    1)原子性(A):事务中包含了很多数据库的操作, 但是事务是原子单位不能分割。事务只能成功或失败。
    2)一致性(C):事务执行后, 数据库状态和业务期望的结果一致。
    3)隔离性(I):指的是在并发操作数据库时, 不同事务之间有隔离性, 事务与事务之间不会受到干扰。
    4)持久性(D):一旦事务提交成功, 事务中对数据的所有操作都会同步到数据库中。

37.MySQL中的事务:
    1)默认情况下, 在MySQL中执行的每条SQL都可以单独看成一个事务。
    2)在MySQL中开启事务, 让事务中含有多条sql语句:

        START TRANSACTION;
            sql1;
            sql2;
        COMMIT;

38.MySQL的事务默认是关闭的, 需要手动开启, Oracle中的事务默认是开启的。

39.JDBC认为同一个事务中的所有操作都是由同一个Connection对象完成的。
    // 开启事务(设置非自动提交)
    conn.setAutoCommit(false);

40.同一个事务中Connection对象必须保持唯一。(Connection只能获取一次)

41.为了获得更好的运行性能, 数据库允许多个事务同时运行, 当事务并发访问数据库中相同的数据时,
通常需要采取必要的隔离机制, 反之会出现各种并发问题。

42.事务并发的读问题:
    1)脏读:即一个事务读取到另一事务未提交的更新数据(随时可能回滚), 这种情况要坚决避免。

    2)不可重复读:在同一事务中, 多次读取同一数据返回的结果有所不同。
    也就是说, 后续的读取, 可以读取到另一事务已提交的更新数据。(一般允许这种情况)

    3)虚读(幻读):一个事务读取到另一事务已提交的insert数据。(对同一张表的两次查询不一致)

43.事务的四大隔离级别:不同事务隔离级别能够解决的数据并发问题的能力是不同的。
    1)SERIALIZABLE(串行化):从MVCC并发控制退化为基于锁的并发控制。不区别快照读与当前读, 所有的读操作均为当前读, 读加读锁(S锁), 写加写锁(X锁)。
    Serializable隔离级别下, 读写出现冲突, 因此并发度急剧下降, 在MySQL/InnoDB下不建议使用。

    2)REPEATABLE READ(可重复读):针对当前读, RR隔离级别保证对读取到的记录加锁(记录锁), 同时保证对读取的范围加锁,
    新的满足查询条件的记录不能够插入(间隙锁), 不存在幻读现象。(MySQL默认是这种隔离级别)

    3)READ COMMITTED(读已提交数据):只能防止脏读。针对当前读, RC隔离级别保证对读取到的记录加锁(记录锁), 存在幻读现象。

    4)READ UNCOMMITTED(读未提交数据):没有任何防止并发问题的措施。(数据库执行效率最高)

44.查看MySQL的隔离级别:

    SELECT @@tx_isolation;

45.数据库连接池:

    1)数据库连接池:用来管理Connection对象的, 使Connection对象可以重复使用,
    防止频繁的创建和销毁带来不必要的资源开销。

    2)当我们需要Connection对象操作数据库时, 就从数据库连接池中获得该对象,
    使用完毕后调用conn.close()把Connection对象归还给连接池而不是销毁。

46.事务的传播行为:事务方法被另一个事务方法调用的现象。

    1)REQUIRED:如果当前有事务就在当前事务运行, 如果没有, 则新开一个事务。(默认传播行为)
    2)SUPPORTS:当前有事务就在事务中运行, 否则在非事务中运行。

// 查出A中不包含在B中的元素
SELECT * FROM tablea A LEFT JOIN  tableb B ON A.id = B.id WHERE B.id IS NULL;

// 查出B中不包含在A中的所有元素
SELECT * FROM tablea A RIGHT JOIN  tableb B ON A.id = B.id WHERE A.id IS NULL;

// 查询两张表全部数据(不包含交集)
(SELECT * FROM tablea A LEFT JOIN  tableb B ON A.id = B.id WHERE B.id IS NULL)
UNION
(SELECT * FROM tablea A RIGHT JOIN  tableb B ON A.id = B.id WHERE A.id IS NULL)

索引(index):是一种数据结构(排好序的, 快速查找数据结构), 用来帮助mysql提高查询效率。

索引主要用来提升:where condition, order by column和group by column。(查询 + 排序)

索引:提高数据检索效率, 降低IO成本。提高数据排序速度, 降低CPU消耗。

索引提高查询速度, 但是会降低更新速度。(insert, update, delete时, 不仅改变数据, 还会改变索引的信息)

单值索引:一个索引只包含单个列。
唯一索引:索引列的值必须唯一, 但是允许NULL值。
复合索引:一个索引包含多个列。

一个查询语句只能挑选一个索引使用。

主键自动建立唯一索引。
频繁作为条件查询的字段应该建立索引。
查询中与其它表关联的字段要建立索引。
高并发下更倾向于复合索引。
查询中排序的字段应该建立索引。
group by后面的字段也要建立索引。
表记录太少不需要建立索引。
列数据大量重复, 尽量不建索引。

给age,crt_time添加复合索引。
EXPLAIN SELECT * FROM idx_user t ORDER BY t.age; // 无法使用索引排序。
EXPLAIN SELECT * FROM idx_user t WHERE t.age>20 ORDER BY t.age; // 可以使用索引排序
EXPLAIN SELECT * FROM idx_user t WHERE t.age>20 ORDER BY t.crt_time; // 无法使用索引排序
EXPLAIN SELECT * FROM idx_user t WHERE t.age=20 ORDER BY t.crt_time; // 可以使用索引

对MyISAM表的读操作, 不会阻塞其他用户对同一表的读请求, 但会阻塞对同一表的写请求。
对MyISAM表的写操作, 则会阻塞其他用户对同一表的读和写操作。

InnoDB存储引擎:update的时候如果索引失效会变表锁。(where后索引失效)

锁定某一行数据:for update。 // 该行不允许被其它用户 进行读/写操作。(排它锁)

EXPLAIN SELECT * FROM br_user t WHERE t.username = '春阳' AND t.age>20 ORDER BY t.crt_time DESC; 最优的索引创建方式==> username和crt_time。

左外连接在右表建索引, 右外连接在左表建立索引(因为始终会有一张表被全表扫描, 另一张表只查询出部分结果与之匹配)

防止索引失效:
    1)复合索引的第一个列必须使用, 否则索引失效。

    2)使用复合索引, 必须按顺序使用(不能跳过某一列)。否则索引部分生效。

    3)不能在索引列上做任何操作(计算, 函数, 自动/手动 类型转换)。否则索引失效。

    4)范围条件右边的索引列会失效。

    5)尽量使用覆盖索引(不写SELECT *, 查询列和索引列 顺序和个数保持一致)。

    6)使用!= 或 <> 的时候 索引失效, 全表扫描。

    8)like是range(范围查询), 但书写格式必须是:like '值%', 否则索引失效。

    9)如果想要实现 like '%值%' 索引不失效, 那么解决方案是查询列使用覆盖索引。

    10)字符串不加单引号索引会失效。(不写引号, mysql会自动类型转换导致索引失效)

    11)少用or连接, or连接也可能引起索引失效, 使用UNION和IN替换or。

    12)Mysql优化器, 会调整索引列的位置, 但是我们还是要按索引列的顺序使用。

给 c1 c2 c3 c4 添加复合索引。
EXPLAIN
SELECT * FROM idx_table t
WHERE t.c1 ='c1' AND t.c2='c2' AND t.c4 = 'c4'
ORDER BY t.c3;

上述SQL:索引使用了 c1, c2, c3(参与排序)。  c4失效。

EXPLAIN SELECT * FROM idx_table t WHERE t.c1 = 'c1' ORDER BY t.c3,t.c2; // 使用索引c1。(order by后, 优化器不会调整索引列位置)

使用EXPLAIN可以得知:
    1)表的读取顺序。
    3)可以使用的索引。
    4)实际使用的索引。
    5)表之间的引用。

id:表的读取顺序。
    1)id相同:顺序由上置下。
    2)id不同:id值越大, 优先级越高, 优先被执行。
    3)id为null的就表示这是一个结果集,不需要使用它来进行查询。

select_type:数据读取的操作类型。
    1)SIMPLE:最简单的SELECT查询, 没有使用UNION或子查询。
    2)PRIMARY:在嵌套查询中是最外层的SELECT语句, 在UNION查询中是最前面的SELECT语句。
    3)SUBQUERY:子查询。
    4)DEPENDENT SUBQUERY:子查询并且依赖外部查询。
    5)DERIVED:派生表, FROM子句中的SELECT语句。
    6)UNION:UNION中第二个SELECT语句。
    7)UNION RESULT:合并的结果集。
    8)DEPENDENT UNION:UNION中第二个SELECT语句, 并且依赖外部查询。

table:这一行的数据是关于哪张表的。

type:访问表的类型。
    1)system:表中只有一行数据或者是空表(InnoDB为index)。
    2)const:通过索引一次就查到了(主键或者唯一索引查询时)。
    3)eq_ref:唯一性索引扫描(主键或者唯一索引)。
    4)ref:非唯一性索引扫描(普通索引)。
    5)range:索引范围扫描。
    6)index:遍历索引树。
    7)all:全表扫描。

索引优化:至少要达到range级别, 最好能到ref。

possible_keys:可能使用到的索引。

key:实际使用的索引。 若查询中出现了覆盖索引, 则该索引只出现在key列。

key_len:实际使用的索引长度。

ref:帮助查询的索引列(如果是const, 说明帮助查询的是一个常量)

rows:大致估算, 找到所需记录要读取的行数。(越少越好)

Extra:重要的额外信息。
    1)Using filesort:排序时没有使用索引。(order by和group by 会引起此问题)
    2)Using temporary:产生临时表。(group by 会引起此问题)
    3)Using index:使用了覆盖索引, 没有访问数据行。
    4)Using where:使用了where过滤。
    5)using join buffer:使用了连接缓存。

mysql主从同步原理:
    1)主库将变更写入binlog日志, 然后从库连接到主库之后, 从库有一个IO线程, 将主库的binlog日志拷贝到自己本地的relay日志中。
    接着从库中有一个SQL线程会从中继日志读取binlog, 然后执行binlog日志中的内容, 也就是在自己本地再次执行一遍SQL, 这样就可以保证自己跟主库的数据是一样的。

    2)从库同步主库数据的过程是串行化的, 也就是说主库上并行的操作, 在从库上会串行执行。在高并发场景下, 从库的数据一定会比主库慢一些, 是有延时的。
    刚写入主库的数据可能是读不到的, 要过几十毫秒, 甚至几百毫秒才能读取到。

    3)主库宕机可能导致从库数据不完整。

解决从库数据丢失问题:半同步复制。指的就是主库写入binlog日志之后, 就会强制此时立即将数据同步到从库,
从库将日志写入自己本地的relay log之后, 接着会返回一个ack给主库, 主库接收到至少一个从库的ack之后才会认为写操作完成了。

解决主从同步延时问题:并行复制。指的是从库开启多个线程, 并行读取relay log中不同库的日志, 然后并行重放不同库的日志, 这是库级别的并行。
若单库写并发特别高, 并行复制没有意义。需使用分库解决。

高并发系统:
    1)系统拆分:将一个系统拆分为多个子系统, 用dubbo来搞, 然后每个系统连一个数据库。原有一个库拆分为多个库。
    2)缓存:单机支撑几万读并发。
    3)MQ:抗写并发。
    4)读写分离
    5)ES
    6)分库分表

事务中尽量不要包含IO等耗时操作, 会长时间占用数据库连接。

mysql产生死锁的原因:两个(或以上)的Session加锁的顺序不一致。那么对应的解决死锁问题的关键就是让不同的session加锁有次序。
    // 在in里面的列表值mysql是会自动从小到大排序的, 加锁顺序也是一条一条从小到大加的锁。
    select * from t3 where id in (8, 9) for update;
    // 5加锁成功, 等待8被释放
    select * from t3 where id in (10, 8, 5) for update;
    // 阻塞
    select * from t3 where id = 5 for update;
    // 10加锁成功
    select * from t3 where id = 10 for update;

聚簇索引:InnoDB索引。使用B+Tree作为索引结构, InnoDB的数据文件本身就是索引文件, 索引的key是数据表的主键。
辅助索引文件存储的是主键的值。(辅助索引文件都引用着主键值, 所以主键不推荐使用过长的字段)

非聚簇索引:MyISAM索引。使用B+Tree作为索引结构, 主索引和辅助索引的索引文件仅仅保存数据记录的物理地址。MyISAM索引文件和数据文件是分离的。

InnoDB存储引擎, 多版本的并发控制协议(MVCC, 仅RC、RR支持):读不加锁, 读写不冲突。

在MVCC并发控制中, 读操作可以分成两类:
    1)快照读:读取的是记录的可见版本, 不加锁。(可能是历史版本)
        select * from table where ? ; (SERIALIZABLE会加锁, 不存在快照读)
    2)当前读:读取的是记录的最新版本, 会加锁, 保证不能并发修改。
        select * from table where ? lock in share mode;(S锁)
        select * from table where ? for update;(X锁)
        insert into table values(...);(X锁)
        update table set ? where ? ;(X锁)
        delete from table where ? ;(X锁)

一个Update操作的具体流程:当Update SQL被发给MySQL后, MySQL Server会根据where条件, 读取第一条满足条件的记录, 然后InnoDB引擎会将第一条记录返回并加锁。
待MySQL Server收到这条加锁的记录之后, 会再发起一个Update请求, 更新这条记录。一条记录操作完成, 再读取下一条记录, 直至没有满足条件的记录为止。

Insert操作会稍微有些不同, 简单来说, 就是Insert操作可能会触发Unique Key的冲突检查, 也会进行一个当前读。

只有事务执行完毕才会释放所有锁。

read view判断当前版本数据是否可见:在innodb中, 创建一个新事务的时候, innodb会将当前系统中的活跃事务列表创建一个副本(read view),
副本中保存的是系统当前不应该被本事务看到的其他事务id列表。当用户在这个事务中要读取该行记录的时候, innodb会将该行当前的版本号与该read view进行比较。
    1)设当前事务读取到的当前row的db_trx_id的为trx_id, read view中最早的事务id为trx_id_earliest, 最迟的事务id为trx_id_latest。
    2)如果trx_id < trx_id_earliest的话, 那么表明该行记录所在的事务已经在本次新事务创建之前就提交了, 所以该行记录的当前值是可见的。跳到步骤6。(快照读)
    3)如果trx_id > trx_id_latest的话, 那么表明该行记录所在的事务在本次新事务创建之后才开启, 所以该行记录的当前值不可见, 跳到步骤5。
    4)如果trx_id_earliest <= trx_id <= trx_id_latest, 那么表明该行记录所在事务在本次新事务创建的时候处于活动状态, 从trx_id_earliest到trx_id_latest进行遍历,
    如果trx_id等于他们之中的某个事务id的话, 那么不可见。跳到步骤5。
    5)从该行记录的DB_ROLL_PTR指针所指向的回滚段中取出最新的undo-log的版本号, 将它赋值该trx_id, 然后跳到步骤2。
    6)将该可见行的值返回。

注意:这里强调的本次事务, 指的是read view中的事务。

RC:同一个事务中每次sql执行时, 创建一个新的read view。
RR:开启事务时才会创建read view。

delete from t1 where id = 10;
    1)id主键 + RC:id=10这条记录上加X锁。
    2)id唯一索引(name主键索引) + RC:unique索引上的id=10索引记录加上X锁, 聚簇索引上的name = "XXX"对应的主键索引项加X锁。
    3)id非唯一索引 + RC:同上, 只是加锁的记录为多条。
    4)id无索引 + RC:由于id列上没有索引, 因此只能走聚簇索引, 进行全部扫描。将聚簇索引上所有的记录加上X锁,
    在实际的实现中, MySQL有一些改进, 会释放掉不满足条件的X锁。

    5)id主键 + RR:与(1)一致。
    6)id唯一索引 + RR:与(2)一致。
    7)id非唯一索引 + RR:id索引上的id = 10索引记录加上X锁, 同时加上GAP锁, 聚簇索引上的name = "XXX"对应的主键索引项加X锁。
    8)id无索引 + RR:聚簇索引上的所有记录加X锁, 聚簇索引每条记录间的间隙加GAP锁。除了不加锁的快照读, 其他任何加锁的并发SQL, 不能更新、不能删除、不能插入。全表锁死。
    也可以通过一些机制, 来让不符合条件的记录提前释放X锁、GAP锁。

